{% extends parent_template %}

{% block title %}
    {% if record|default is not empty and record.exists %}
        {{ record.formatted_name }}
        {% if auth_user().hasPermission('update.user') %}
            - {{ Lang.get('general.edit_item', {'item': Lang.choice('user.user', 1)}) }}
        {% endif %}
    {% else %}
        {{ Lang.get('general.add_item', {'item': Lang.choice('user.user', 1)}) }}
    {% endif %}
{% endblock %}

{% block pageTitle %}
    {% set title %}
        {{ block('title') }}
        {% if record|default is not empty and record.exists and auth_user().hasPermission('create.ticket') %}
            &nbsp;
            <a class="button" href="{{ route('ticket.operator.ticket.createStep1', {'user': record.id}) }}">
                {{ Lang.get('ticket.open_new') }}
            </a>
        {% endif %}
    {% endset %}

    {{ parent() }}
{% endblock %}

{% block content %}

    {% if record|default is not empty and record.exists %}
        {% include 'operator.' ~ template ~ '.user.forms.user_tabs' %}

        {{ form_model(record, { 'route': [ 'user.operator.user.update', record.id ], 'method': 'PUT', 'files': true, 'class': 'edit-user validate' }) }}
    {% else %}
        {{ form_open({ 'route': 'user.operator.user.store', 'files': true, 'class': 'validate' }) }}
    {% endif %}

        <div class="success box action hide">
            {{ Lang.get('messages.success_action') }}
        </div>
        <div class="fail box action hide">
            {{ Lang.get('messages.error_action') }}
        </div>

        <h2>{{ Lang.get('user.profile') }}</h2>
        <div class="form-container first">
            {% include 'operator.' ~ template ~ '.user.forms.profile' with { 'managing': true } %}
        </div>

        {% if Config.get('settings.organisations_enabled') %}
            <h2>{{ Lang.choice('user.organisation', 1) }}</h2>
            <div class="form-container first">
                {% include 'operator.' ~ template ~ '.user.forms.organisation' %}
            </div>
        {% endif %}

        {% if customfields is not empty %}
            <div class="user-customfields">
                <h2>{{ Lang.get('general.custom_fields') }}</h2>
                <div class="form-container first">
                    {% include 'operator.' ~ template ~ '.forms.customfields' with { 'operator': true } %}
                </div>
            </div>
        {% endif %}

        <div class="form-button">
            {{ form_submit(Lang.choice('general.submit', 1)) }}
            {% if record.exists and not operator %}
                <button class="delete-user" type="button">{{ Lang.get('general.delete', {'item': Lang.choice('user.user', 1)}) }}</button>
            {% endif %}
        </div>

    {{ form_close() }}

{% endblock %}

{% block scripts_footer %}
    {% if jsValidator|default is not empty %}
        {{ jsValidator|raw }}
    {% endif %}

    <!-- Custom fields -->
    <script src="{{ asset_rev('resources/assets/general/js/customfields.js') }}"></script>

    <script src="{{ asset_rev('resources/assets/libs/redactor/js/redactor.min.js') }}"></script>
    <link rel="stylesheet" type="text/css" href="{{ asset_rev('resources/assets/libs/redactor/css/redactor.css') }}">

    <script src="{{ asset_rev('resources/assets/operator/js/randomPassword.js') }}"></script>
    <script src="{{ asset_rev('resources/assets/libs/hideShowPassword/js/hideShowPassword.min.js') }}"></script>

    <script src="{{ asset_rev('resources/assets/libs/moment/js/moment.js') }}"></script>
    <script src="{{ asset_rev('resources/assets/libs/pikaday/js/pikaday.js') }}"></script>
    <script src="{{ asset_rev('resources/assets/libs/pikaday/js/pikaday.jquery.js') }}"></script>
    <link href="{{ asset_rev('resources/assets/libs/pikaday/css/pikaday.css') }}" rel="stylesheet" type="text/css" />

    <link href="{{ asset_rev('resources/assets/libs/selectize/css/selectize.css') }}" rel="stylesheet" />
    <script src="{{ asset_rev('resources/assets/libs/selectize/js/selectize.min.js') }}"></script>

    <script src="{{ asset_rev('resources/assets/libs/sweetalert2/js/sweetalert2.min.js') }}"></script>
    <link rel="stylesheet" type="text/css" href="{{ asset_rev('resources/assets/libs/sweetalert2/css/sweetalert2.css') }}">

    <script src="{{ asset_rev('resources/assets/operator/js/delete.alert.js') }}"></script>
    
    <script type="text/javascript">
        $(document).ready(function() {
            // Toggle the password fields depending on whether we're sending a confirmation email
            $('input[name="send_email"]').click(function() {
                $('.password-field').toggle();
                $('.password-field button.hideShowPassword-toggle').click().click();
            });

            // Toggle the password fields, depending on how the page loads (when an error occurs, the form resets to
            // how it was before the error occured
            if ($('input[name=send_email]').length && $('input[name=send_email]').is(':checked') == false) {
                $('.password-field').toggle();
            }

            // Enable hide/show password toggle
            callHideShowPassword();

            // Generate a new random password
            $('a#generatePassword').click(function() {
                var password = randomPassword(8);

                if (document.getElementById('password').type == 'text') {
                    document.getElementById('password').value=password;
                } else {
                    document.getElementById('password').type='text';
                    document.getElementById('password').value=password;
                    document.getElementById('password').type='password';
                }
            });

            // Date picker
            callPikaday();

            $('select[name="groups[]"]').selectize({
                plugins: ['remove_button'],
                delimiter: ',',
                placeholder: Lang.get('user.select_group')
            });

            if ($('select[name="organisation"]').val() == null) {
                $('select[name="organisation_access"]').prop('disabled', true);
                $('.access-level').hide();
            }

            var $organisationSelectize = $('select[name="organisation"]').selectize({
                valueField: 'id',
                labelField: 'name',
                searchField: 'name',
                create: true,
                placeholder: "Select an existing or enter a new organisation...",
                allowEmptyOption: true,
                load: function(query, callback) {
                    if (!query.length) return callback();
                    $.ajax({
                        url: "{{ route('user.organisation.search') }}",
                        type: 'GET',
                        dataType: 'json',
                        data: {
                            q: query,
                            brand_id: $(':input[name="brand_id"]').val()
                        },
                        error: function() {
                            callback();
                        },
                        success: function(res) {
                            callback(res.data);
                        }
                    });
                },
                onChange: function(value) {
                    // Check if it's a number
                    if (!isNaN(parseFloat(value)) && isFinite(value)) {
                        // Re-enable dropdown
                        $('select[name="organisation_access"]').prop('disabled', false);
                        $('.access-level').show();
                    } else if (value == '') {
                        $('.access-level').hide();
                    } else {
                        // Disable dropdown and set to owner as it's a new organisation
                        $('select[name="organisation_access"]').val(0).prop('disabled', true);
                        $('.access-level').show();
                    }

                    // Handle notifications option showing/hiding
                    $('select[name="organisation_access_level"]').change();

                    // Hide view organisation button
                    $('.view-organisation').hide();
                }
            });

            // Show notifications options for managers only
            $('select[name="organisation_access_level"]').change(function() {
                if ($(this).val() == 1 || ! $(this).is(':visible')) {
                    $('.organisation-notifications').hide().find(':input').prop('disabled', true);
                } else {
                    $('.organisation-notifications').show().find(':input').prop('disabled', false);
                }
            });

            // Reset password link
            $('.reset-password').click(function() {
                $.post(
                    laroute.route(
                        'user.operator.user.resetpassword',
                        { id: {{ record|default is not empty and record.exists ? record.id : 'null' }} }
                    ),
                    { },
                    function(response) {
                        if (response.status == 'success') {
                            $('.action.success').show(500).delay(5000).hide(500);
                        } else {
                            $('.action.fail').show(500).delay(5000).hide(500);
                        }
                    },
                    "json"
                ).fail(function() {
                    $('.action.fail').show(500).delay(5000).hide(500);
                });
            });

            {% if record.exists and not operator %}
                // Delete user button
                $('.delete-user').on('click', function() {
                    var section = '{{ Lang.choice('user.user', 1) }}',
                        name = $('<div/>').text($('input[name=email]').val()).html(),
                        relations = {{ relations|json_encode|raw }};
                    
                    // Show the alert
                    swal(deleteAlert.getDefaultOpts(section, name, relations), function(isConfirm) {
                        if (isConfirm) {
                            // Disable submit button
                            deleteAlert.disableButtons();
                            // Go to user list
                            $('body').append($('<form class="delete" action="' + laroute.route('user.operator.user.destroy_redirect', { id: {{ record.id }} }) + '" method="POST">'
                                + '<input name="_method" type="hidden" value="DELETE" />'
                                + '<input name="_token" type="hidden" value="' + $('meta[name=csrf_token]').prop('content') + '">'
                            + '</form>'));
                            $('form.delete').submit();
                        }
                    });
                });
            {% endif %}

            // If on edit page and in 'show' mode (no update permission)
            {% if record|default is not empty and record.exists
                and not auth_user().hasPermission('update.user') %}
                // Hide password fields
                $('.password-field').hide();
                $('.reset-password').parents('.form-row').hide();

                // Convert input fields to plain text
                $('.edit-user :input').not('[type=hidden]').replaceWith(function() {
                    var value = $(this).val();

                    // Checkboxes
                    if ($(this).is('[type=checkbox]')) {
                        if ($(this).parents('.input-group').length) {
                            if ($(this).is(':checked')) {
                                return '<span></span>';
                            } else {
                                $(this).parent().add($(this).parent().next()).remove();
                                return;
                            }
                        } else {
                            value = $(this).is(':checked') ? Lang.get('general.yes') : Lang.get('general.no');
                        }
                    }

                    // Dropdowns
                    if ($(this).is('select')) {
                        if (value != '') {
                            value = $.map(
                                $(this).find('option:selected'),
                                function(element) { return $(element).text(); }
                            ).join(', ');
                        } else {
                            value = 'None';
                        }
                    }

                    // Radio buttons
                    if ($(this).is('[type=radio]')) {
                        if ($(this).is(':checked')) {
                            return '<span></span>';
                        } else {
                            $(this).parent().add($(this).parent().next()).remove();
                            return;
                        }
                    }

                    // Buttons, Files and Submits
                    if ($(this).is('[type=file]') || $(this).is('[type=submit]') || $(this).is('button')) {
                        return '<span></span>';
                    }

                    // Text/textarea fields
                    if (value == '') {
                        value = Lang.get('general.na');
                    }

                    return '<span>' + value + '</span>'
                });

                // For checklists and radio fields, if there are none selected
                $('.input-group:not(:has(label))').append('<span>' + Lang.get('general.none') + '</span>');

                // Hide selectize boxes
                $('.selectize-control').remove();
            {% endif %}

            // Only applies when creating a user as the brand can be changed
            {% if not record.exists %}
                // Brand and custom fields membership assignment
                var brandCustomFields = JSON.parse('{{ brandCustomFields|raw }}');

                // Change the custom fields to show when the brand is changed
                $(':input[name="brand_id"]').on('change', function() {
                    var brandId = $(this).val();

                    // Clear the organisation. Organisation field may not be present if organisations are disabled.
                    if (typeof $organisationSelectize[0] !== 'undefined') {
                        $organisationSelectize[0].selectize.clearOptions();
                    }

                    // Check if each field exists in the currently selected brand
                    $('[data-field]').each(function () {
                        if (brandCustomFields[brandId].indexOf($(this).data('field')) === -1) {
                            $(this).find(':input').prop('disabled', true);
                            $(this).hide();
                        } else {
                            $(this).find(':input').prop('disabled', false);
                            
                            var dependsOn = $(this).data('depends-on-option');
                            if (typeof dependsOn === 'number') {
                                $('option[value="'+dependsOn+'"]:selected').is(':visible') ? $(this).show() : $(this).hide();
                            } else {
                                $(this).show();                                                
                            }
                        }
                    });

                    // Do we have any fields for this brand? If not, just hide the section
                    if (brandCustomFields[brandId].length) {
                        $('.user-customfields').show();
                    } else {
                        $('.user-customfields').hide();
                    }
                });

                // Run above code when page loads to remove any fields it shouldn't show for default brand
                $(':input[name="brand_id"]').change();
            {% endif %}
        });
    </script>
{% endblock %}